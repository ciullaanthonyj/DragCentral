//---------------------------------------------------------------------------


#include <pch.h>
#pragma hdrstop

#include "myflash.h"

//---------------------------------------------------------------------------

AnsiString f2s(float v) {
  return FloatToStrF(v,ffFixed,7,10);
}

float prop(float pmin,float pmax,float p,float vmin,float vmax) {
  if((pmax-pmin)==0) return 0;
  return (float)vmin + (vmax-vmin)*(p-pmin)/(pmax-pmin);
}

  void FlashFlic::setvisible(AnsiString name, bool visible) {
    flvisible(mv,name,visible);
  };

// caching visible settings
struct flashvartag {
  AnsiString value;
};

class cFlashCache {
TStringList* visible;
TStringList* flashvars;
public:
  cFlashCache() {
    visible = new TStringList;
    visible->CaseSensitive = true;
	flashvars = new TStringList;
	flashvars->CaseSensitive = true;
  }
  ~cFlashCache() {
	delete visible;
	for(int i=0;i<flashvars->Count;i++)
	  delete (flashvartag*) flashvars->Objects[i];
	delete flashvars;
  }

  AnsiString GetVar(TShockwaveFlash* fl,AnsiString& name) {
	 AnsiString res = fl->GetVariable(wc(name));
	 int i;
	 bool found = flashvars->Find(IntToStr(fl)+name,i);
	 // not found
	 AnsiString sig = IntToStr((int)fl)+name;
	 if(!found) {
	   flashvars->Add(sig);
	   flashvars->Sort();
	   flashvars->Find(sig,i);
	   flashvars->Objects[i] = (TObject*)new flashvartag;
	   ((flashvartag*)flashvars->Objects[i])->value = res;
	 }
	 ((flashvartag*)flashvars->Objects[i])->value = res;
	 return res;
  }

  void SetVar(TShockwaveFlash* fl,AnsiString& name,AnsiString& value, bool cached=true) {
	 int i;
	 AnsiString sig = IntToStr((int)fl)+name;
	 bool found = flashvars->Find(sig,i);
	 // not found
	 if(!found) {
	   flashvars->Add(sig);
	   flashvars->Sort();
	   flashvars->Find(sig,i);
	   flashvars->Objects[i] = (TObject*)new flashvartag;
	   ((flashvartag*)flashvars->Objects[i])->value = "~nEw~";
	 }
	 if ( ((flashvartag*)flashvars->Objects[i])->value != value || !cached) {
	   fl->SetVariable(wc(name),wc2(value));
	   ((flashvartag*)flashvars->Objects[i])->value = value;
	 }
  }

  void SetVisible(TShockwaveFlash* fl,AnsiString& name,bool value) {
	 int i;
	 AnsiString sig = IntToStr((int)fl)+name;
	 bool found = visible->Find(sig,i);
	 // not found
	 if(!found) {
	   visible->Add(sig);
	   visible->Sort();
	   visible->Find(sig,i);
	   visible->Objects[i] = (TObject*)!value;
	 }
	 if (visible->Objects[i] !=(TObject*)value) {
		if(value)
		   fl->SetVariable(wc(name+"._visible"),L"1");
	   else
		   fl->SetVariable(wc(name+"._visible"),L"0");
	   visible->Objects[i] = (TObject*)value;
	 }
  }
} FlashCache;


AnsiString flgetvar(TShockwaveFlash* fl,AnsiString name) {
  PSTARTP("flgetvar","gameandflash");
  AnsiString res=FlashCache.GetVar(fl,name);
  PEND("flgetvar");
  return res;
}
void flsetvar(TShockwaveFlash* fl,AnsiString name,AnsiString value,bool cache) {
  PSTARTP("flsetvar","gameandflash");
//  fl->SetVariable(wc(name),wc2(value));

  FlashCache.SetVar(fl,name,value,cache);
  PEND("flsetvar");
}
void flvisible(TShockwaveFlash* fl,AnsiString name,bool value) {
  PSTARTP("flvisible","gameandflash");
  FlashCache.SetVisible(fl,name,value);
  PEND("flvisible");

}
void MoviePos::getvars(TShockwaveFlash* fl,AnsiString name) {
	 xscale = StrToFloat(fl->GetVariable(wc(name+"._xscale")));
	 yscale = StrToFloat(fl->GetVariable(wc(name+"._yscale")));
	 x = StrToFloat(fl->GetVariable(wc(name+"._x")));
	 y = StrToFloat(fl->GetVariable(wc(name+"._y")));
	 width = StrToFloat(fl->GetVariable(wc(name+"._width")));
	 height = StrToFloat(fl->GetVariable(wc(name+"._height")));
	 alpha = StrToFloat(fl->GetVariable(wc(name+"._alpha")));
	 cx = x + width/2;
	 cy = y + height/2;
  }

void MoviePos::setvars(TShockwaveFlash* fl,AnsiString name) {
  PSTARTP("moviepos::setvars","gameandflash");
	fl->SetVariable(wc(name+"._x"),wc2( FloatToStrF(x,ffFixed,10,2) ));
	fl->SetVariable(wc(name+"._y"),wc2(  FloatToStrF(y,ffFixed,10,2)  ));
	fl->SetVariable(wc(name+"._xscale"),wc2(  FloatToStrF(xscale,ffFixed,10,2) ));
	fl->SetVariable(wc(name+"._yscale"),wc2(  FloatToStrF(yscale,ffFixed,10,2) ));
	fl->SetVariable(wc(name+"._alpha"),wc2(  FloatToStrF(alpha,ffFixed,10,2)  ));
  PEND("moviepos::setvars");
  }

//flash f2s
AnsiString ff2s(float f) {
  AnsiString res = FloatToStrF(f,ffFixed,10,2);
  if(res[1]=='.')
	res = "0"+res;
  return res;

}
void MoviePos::setstringvars(TShockwaveFlash* fl,AnsiString name) {
  PSTARTP("moviepos::setstringvars","gameandflash");
	//xscale = 10;
	//yscale = 10;
	AnsiString vars = ff2s(x) + "," +
	ff2s(y)  + "," +
	ff2s(xscale) + "," +
	ff2s(yscale) + "," +
	ff2s(alpha);
	flsetvar(fl, name+"_pos",vars);
  PEND("moviepos::setstringvars");
  }

void MoviePos::scale(float pmin,float pmax,float p,MoviePos &s, MoviePos &e) {
	x = prop(pmin,pmax,p,s.x,e.x);
	y = prop(pmin,pmax,p,s.y,e.y);
    xscale = prop(pmin,pmax,p,s.xscale,e.xscale);
    if(xscale<0) xscale = 0;
    yscale = prop(pmin,pmax,p,s.yscale,e.yscale);
    if(yscale<0) yscale = 0;
    alpha = prop(pmin,pmax,p,s.alpha,e.alpha);
    if(alpha<0) alpha = 0;
    if(alpha>100) alpha = 100;;
  }

void FlashFlic::setvar(AnsiString name, AnsiString value) {
   flsetvar(mv,name,value);
}

#pragma package(smart_init)
